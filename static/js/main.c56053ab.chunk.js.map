{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","htmlFor","min","max","onClick","Component","Task","_props$task","task","id","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","components_Task","key","doneTasks","style_done","fontSize","letterSpacing","Fragment","App","counter","deleteTask","Object","toConsumableArray","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","concat","src_components_AddTask","src_components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c56053ab.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./AddTask.css\";\r\n\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate,\r\n  };\r\n\r\n  handleText = (e) => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked,\r\n    });\r\n  };\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const { text, date, checked } = this.state;\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, date, checked);\r\n      if (add) {\r\n        this.setState({\r\n          text: \"\",\r\n          checked: false,\r\n          date: this.minDate,\r\n        });\r\n      }\r\n    } else {\r\n      alert(\"This name is too short!\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    //*1 change string to number (we want to have max date 2021-12-31)\r\n    maxDate = maxDate + \"-12-31\";\r\n\r\n    return (\r\n      <div className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"TO DO\"\r\n          value={this.state.text}\r\n          onChange={this.handleText}\r\n        />\r\n        <label className=\"important\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={this.state.checked}\r\n            onChange={this.handleCheckbox}\r\n          />\r\n          <span className=\"custom-checkbox\" />\r\n          Important\r\n        </label>\r\n        <br />\r\n        <label htmlFor=\"date\">Task should be done at the latest:</label>\r\n        <input\r\n          type=\"date\"\r\n          value={this.state.date}\r\n          min={this.minDate}\r\n          max={maxDate}\r\n          onChange={this.handleDate}\r\n        />\r\n        <br />\r\n        <button onClick={this.handleClick}>Add task</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Task = (props) => {\r\n  const style = {\r\n    color: \"#d6336c\",\r\n  };\r\n\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong>{\" \"}\r\n          <i className=\"fas fa-long-arrow-alt-right\" /> deadline:\r\n          <span>{\" \" + date + \" \"} </span>\r\n          <button onClick={() => props.change(id)}>Done</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text}</strong>\r\n          <em> (deadline: {date})</em>\r\n          <br />\r\n          <i className=\"fas fa-long-arrow-alt-right\" /> done:\r\n          <span> {finish}</span>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\nimport \"./TaskList.css\";\r\n\r\nconst TaskList = (props) => {\r\n  const active = props.tasks.filter((task) => task.active);\r\n  const done = props.tasks.filter((task) => !task.active);\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n      if (a.finishDate < b.finishDate) {\r\n        return 1;\r\n      }\r\n      if (a.finishDate > b.finishDate) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  const activeTasks = active.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n  const doneTasks = done.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n\r\n  const style_done = {\r\n    fontSize: 14,\r\n    color: \"#92425f\",\r\n    letterSpacing: 1,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"active\">\r\n        <h2>Your tasks to do</h2>\r\n        {activeTasks.length > 0 ? (\r\n          activeTasks\r\n        ) : (\r\n          <p style={style_done}>Your to do list is empty</p>\r\n        )}\r\n      </div>\r\n      <div className=\"done\">\r\n        <h3>Tasks done</h3>\r\n        {done.length > 5 && (\r\n          <span style={style_done}>Only 5 tasks are shown here</span>\r\n        )}\r\n        {done.length === 0 && <span style={style_done}>Nothing done</span>}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  counter = 2;\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: \"clean my room\",\n        date: \"2020-09-15\",\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 1,\n        text: \"call my sister\",\n        date: \"2020-11-12\",\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n    ],\n  };\n\n  deleteTask = (id) => {\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter((task) => task.id !== id);\n    this.setState({\n      tasks,\n    });\n  };\n\n  changeTaskStatus = (id) => {\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach((task) => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks,\n    });\n  };\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null,\n    };\n    this.counter++;\n\n    this.setState((prevState) => ({\n      tasks: [...prevState.tasks, task],\n    }));\n    return true;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>TO DO APP</h1>\n        <AddTask add={this.addTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />\n        <div className=\"lettering\">\n          <p>My to dos </p>\n          <p>for this week</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}